// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: janus.proto

package janusrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SingleStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   string `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	DeviceType string `protobuf:"bytes,2,opt,name=deviceType,proto3" json:"deviceType,omitempty"`
}

func (x *SingleStateRequest) Reset() {
	*x = SingleStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleStateRequest) ProtoMessage() {}

func (x *SingleStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleStateRequest.ProtoReflect.Descriptor instead.
func (*SingleStateRequest) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{0}
}

func (x *SingleStateRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SingleStateRequest) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

type MultipleStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
}

func (x *MultipleStateRequest) Reset() {
	*x = MultipleStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleStateRequest) ProtoMessage() {}

func (x *MultipleStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleStateRequest.ProtoReflect.Descriptor instead.
func (*MultipleStateRequest) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{1}
}

func (x *MultipleStateRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type StateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId        string `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	NodeId          string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Temperature     int64  `protobuf:"varint,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Consumption     int64  `protobuf:"varint,4,opt,name=consumption,proto3" json:"consumption,omitempty"`
	EnergyConsumed  int64  `protobuf:"varint,5,opt,name=energyConsumed,proto3" json:"energyConsumed,omitempty"`
	LastReport      int64  `protobuf:"varint,6,opt,name=lastReport,proto3" json:"lastReport,omitempty"`
	Conected        bool   `protobuf:"varint,7,opt,name=conected,proto3" json:"conected,omitempty"`
	EnergyGenerated int64  `protobuf:"varint,8,opt,name=energyGenerated,proto3" json:"energyGenerated,omitempty"`
	Enabled         bool   `protobuf:"varint,9,opt,name=enabled,proto3" json:"enabled,omitempty"`
	NeedManteinance bool   `protobuf:"varint,10,opt,name=needManteinance,proto3" json:"needManteinance,omitempty"`
	LastManteinance int64  `protobuf:"varint,11,opt,name=lastManteinance,proto3" json:"lastManteinance,omitempty"`
}

func (x *StateResponse) Reset() {
	*x = StateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateResponse) ProtoMessage() {}

func (x *StateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateResponse.ProtoReflect.Descriptor instead.
func (*StateResponse) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{2}
}

func (x *StateResponse) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StateResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *StateResponse) GetTemperature() int64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *StateResponse) GetConsumption() int64 {
	if x != nil {
		return x.Consumption
	}
	return 0
}

func (x *StateResponse) GetEnergyConsumed() int64 {
	if x != nil {
		return x.EnergyConsumed
	}
	return 0
}

func (x *StateResponse) GetLastReport() int64 {
	if x != nil {
		return x.LastReport
	}
	return 0
}

func (x *StateResponse) GetConected() bool {
	if x != nil {
		return x.Conected
	}
	return false
}

func (x *StateResponse) GetEnergyGenerated() int64 {
	if x != nil {
		return x.EnergyGenerated
	}
	return 0
}

func (x *StateResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *StateResponse) GetNeedManteinance() bool {
	if x != nil {
		return x.NeedManteinance
	}
	return false
}

func (x *StateResponse) GetLastManteinance() int64 {
	if x != nil {
		return x.LastManteinance
	}
	return 0
}

type MultipleStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*StateResponse `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *MultipleStateResponse) Reset() {
	*x = MultipleStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleStateResponse) ProtoMessage() {}

func (x *MultipleStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleStateResponse.ProtoReflect.Descriptor instead.
func (*MultipleStateResponse) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{3}
}

func (x *MultipleStateResponse) GetStates() []*StateResponse {
	if x != nil {
		return x.States
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Dimension string `protobuf:"bytes,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Lower     string `protobuf:"bytes,4,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper     string `protobuf:"bytes,5,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{4}
}

func (x *Filter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Filter) GetDimension() string {
	if x != nil {
		return x.Dimension
	}
	return ""
}

func (x *Filter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Filter) GetLower() string {
	if x != nil {
		return x.Lower
	}
	return ""
}

func (x *Filter) GetUpper() string {
	if x != nil {
		return x.Upper
	}
	return ""
}

type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Field string `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{5}
}

func (x *Aggregation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Aggregation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Aggregation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension string `protobuf:"bytes,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Direction string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *OrderBy) Reset() {
	*x = OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBy) ProtoMessage() {}

func (x *OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBy.ProtoReflect.Descriptor instead.
func (*OrderBy) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{6}
}

func (x *OrderBy) GetDimension() string {
	if x != nil {
		return x.Dimension
	}
	return ""
}

func (x *OrderBy) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type TimelineQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters      []*Filter      `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Granularity  string         `protobuf:"bytes,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
	Interval     string         `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Dimensions   []string       `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	Aggregations []*Aggregation `protobuf:"bytes,5,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	OrderBy      *OrderBy       `protobuf:"bytes,6,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
}

func (x *TimelineQuery) Reset() {
	*x = TimelineQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineQuery) ProtoMessage() {}

func (x *TimelineQuery) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineQuery.ProtoReflect.Descriptor instead.
func (*TimelineQuery) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{7}
}

func (x *TimelineQuery) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *TimelineQuery) GetGranularity() string {
	if x != nil {
		return x.Granularity
	}
	return ""
}

func (x *TimelineQuery) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *TimelineQuery) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *TimelineQuery) GetAggregations() []*Aggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *TimelineQuery) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type BucketRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Lower string `protobuf:"bytes,2,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper string `protobuf:"bytes,3,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (x *BucketRange) Reset() {
	*x = BucketRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketRange) ProtoMessage() {}

func (x *BucketRange) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketRange.ProtoReflect.Descriptor instead.
func (*BucketRange) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{8}
}

func (x *BucketRange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BucketRange) GetLower() string {
	if x != nil {
		return x.Lower
	}
	return ""
}

func (x *BucketRange) GetUpper() string {
	if x != nil {
		return x.Upper
	}
	return ""
}

type SegmentQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters     []*Filter    `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Granularity string       `protobuf:"bytes,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
	Interval    string       `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Aggregation *Aggregation `protobuf:"bytes,4,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	Dimensions  []string     `protobuf:"bytes,5,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	OrderBy     *OrderBy     `protobuf:"bytes,6,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
}

func (x *SegmentQuery) Reset() {
	*x = SegmentQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentQuery) ProtoMessage() {}

func (x *SegmentQuery) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentQuery.ProtoReflect.Descriptor instead.
func (*SegmentQuery) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{9}
}

func (x *SegmentQuery) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SegmentQuery) GetGranularity() string {
	if x != nil {
		return x.Granularity
	}
	return ""
}

func (x *SegmentQuery) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *SegmentQuery) GetAggregation() *Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *SegmentQuery) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *SegmentQuery) GetOrderBy() *OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

type SegmentedTimelineQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters      []*Filter      `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Granularity  string         `protobuf:"bytes,2,opt,name=granularity,proto3" json:"granularity,omitempty"`
	Interval     string         `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Dimension    string         `protobuf:"bytes,4,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Aggregation  *Aggregation   `protobuf:"bytes,5,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
	GroupBy      []string       `protobuf:"bytes,6,rep,name=groupBy,proto3" json:"groupBy,omitempty"`
	BucketRanges []*BucketRange `protobuf:"bytes,7,rep,name=bucketRanges,proto3" json:"bucketRanges,omitempty"`
}

func (x *SegmentedTimelineQuery) Reset() {
	*x = SegmentedTimelineQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentedTimelineQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentedTimelineQuery) ProtoMessage() {}

func (x *SegmentedTimelineQuery) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentedTimelineQuery.ProtoReflect.Descriptor instead.
func (*SegmentedTimelineQuery) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{10}
}

func (x *SegmentedTimelineQuery) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SegmentedTimelineQuery) GetGranularity() string {
	if x != nil {
		return x.Granularity
	}
	return ""
}

func (x *SegmentedTimelineQuery) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *SegmentedTimelineQuery) GetDimension() string {
	if x != nil {
		return x.Dimension
	}
	return ""
}

func (x *SegmentedTimelineQuery) GetAggregation() *Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *SegmentedTimelineQuery) GetGroupBy() []string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SegmentedTimelineQuery) GetBucketRanges() []*BucketRange {
	if x != nil {
		return x.BucketRanges
	}
	return nil
}

type TimelineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count float32 `protobuf:"fixed32,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TimelineItem) Reset() {
	*x = TimelineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineItem) ProtoMessage() {}

func (x *TimelineItem) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineItem.ProtoReflect.Descriptor instead.
func (*TimelineItem) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{11}
}

func (x *TimelineItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TimelineItem) GetCount() float32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TimelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension string          `protobuf:"bytes,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Items     []*TimelineItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TimelineResponse) Reset() {
	*x = TimelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineResponse) ProtoMessage() {}

func (x *TimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineResponse.ProtoReflect.Descriptor instead.
func (*TimelineResponse) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{12}
}

func (x *TimelineResponse) GetDimension() string {
	if x != nil {
		return x.Dimension
	}
	return ""
}

func (x *TimelineResponse) GetItems() []*TimelineItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type TimelineQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*TimelineResponse `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Total  int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *TimelineQueryResponse) Reset() {
	*x = TimelineQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineQueryResponse) ProtoMessage() {}

func (x *TimelineQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineQueryResponse.ProtoReflect.Descriptor instead.
func (*TimelineQueryResponse) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{13}
}

func (x *TimelineQueryResponse) GetResult() []*TimelineResponse {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TimelineQueryResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SegmentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values   []float32      `protobuf:"fixed32,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	Segments []*SegmentItem `protobuf:"bytes,3,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *SegmentItem) Reset() {
	*x = SegmentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentItem) ProtoMessage() {}

func (x *SegmentItem) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentItem.ProtoReflect.Descriptor instead.
func (*SegmentItem) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{14}
}

func (x *SegmentItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SegmentItem) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *SegmentItem) GetSegments() []*SegmentItem {
	if x != nil {
		return x.Segments
	}
	return nil
}

type SegmentedQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments []*SegmentItem `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	Total    int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SegmentedQueryResponse) Reset() {
	*x = SegmentedQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_janus_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentedQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentedQueryResponse) ProtoMessage() {}

func (x *SegmentedQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_janus_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentedQueryResponse.ProtoReflect.Descriptor instead.
func (*SegmentedQueryResponse) Descriptor() ([]byte, []int) {
	return file_janus_proto_rawDescGZIP(), []int{15}
}

func (x *SegmentedQueryResponse) GetSegments() []*SegmentItem {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *SegmentedQueryResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_janus_proto protoreflect.FileDescriptor

var file_janus_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6a,
	0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x22, 0x50, 0x0a, 0x12, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x83, 0x03, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6e,
	0x65, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x74, 0x65, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x74, 0x65, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x6e,
	0x74, 0x65, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x74, 0x65, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x48, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x22, 0x45, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x0d,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0x4d, 0x0a, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x22, 0xfe,
	0x01, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x2a, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22,
	0xae, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6a, 0x61,
	0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61,
	0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61,
	0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x22, 0x38, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x10, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6a, 0x61,
	0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x61, 0x0a, 0x15, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6c, 0x0a,
	0x0b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x6e,
	0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x61, 0x0a, 0x16, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xf1,
	0x03, 0x0a, 0x0c, 0x4a, 0x61, 0x6e, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x43, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6a, 0x61,
	0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6a, 0x61, 0x6e, 0x75,
	0x73, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x1e, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x2e, 0x6a, 0x61, 0x6e,
	0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20,
	0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x1f, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x20,
	0x2e, 0x6a, 0x61, 0x6e, 0x75, 0x73, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_janus_proto_rawDescOnce sync.Once
	file_janus_proto_rawDescData = file_janus_proto_rawDesc
)

func file_janus_proto_rawDescGZIP() []byte {
	file_janus_proto_rawDescOnce.Do(func() {
		file_janus_proto_rawDescData = protoimpl.X.CompressGZIP(file_janus_proto_rawDescData)
	})
	return file_janus_proto_rawDescData
}

var file_janus_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_janus_proto_goTypes = []interface{}{
	(*SingleStateRequest)(nil),     // 0: janusrpc.SingleStateRequest
	(*MultipleStateRequest)(nil),   // 1: janusrpc.MultipleStateRequest
	(*StateResponse)(nil),          // 2: janusrpc.StateResponse
	(*MultipleStateResponse)(nil),  // 3: janusrpc.MultipleStateResponse
	(*Filter)(nil),                 // 4: janusrpc.Filter
	(*Aggregation)(nil),            // 5: janusrpc.Aggregation
	(*OrderBy)(nil),                // 6: janusrpc.OrderBy
	(*TimelineQuery)(nil),          // 7: janusrpc.TimelineQuery
	(*BucketRange)(nil),            // 8: janusrpc.BucketRange
	(*SegmentQuery)(nil),           // 9: janusrpc.SegmentQuery
	(*SegmentedTimelineQuery)(nil), // 10: janusrpc.SegmentedTimelineQuery
	(*TimelineItem)(nil),           // 11: janusrpc.TimelineItem
	(*TimelineResponse)(nil),       // 12: janusrpc.TimelineResponse
	(*TimelineQueryResponse)(nil),  // 13: janusrpc.TimelineQueryResponse
	(*SegmentItem)(nil),            // 14: janusrpc.SegmentItem
	(*SegmentedQueryResponse)(nil), // 15: janusrpc.SegmentedQueryResponse
}
var file_janus_proto_depIdxs = []int32{
	2,  // 0: janusrpc.MultipleStateResponse.states:type_name -> janusrpc.StateResponse
	4,  // 1: janusrpc.TimelineQuery.filters:type_name -> janusrpc.Filter
	5,  // 2: janusrpc.TimelineQuery.aggregations:type_name -> janusrpc.Aggregation
	6,  // 3: janusrpc.TimelineQuery.orderBy:type_name -> janusrpc.OrderBy
	4,  // 4: janusrpc.SegmentQuery.filters:type_name -> janusrpc.Filter
	5,  // 5: janusrpc.SegmentQuery.aggregation:type_name -> janusrpc.Aggregation
	6,  // 6: janusrpc.SegmentQuery.orderBy:type_name -> janusrpc.OrderBy
	4,  // 7: janusrpc.SegmentedTimelineQuery.filters:type_name -> janusrpc.Filter
	5,  // 8: janusrpc.SegmentedTimelineQuery.aggregation:type_name -> janusrpc.Aggregation
	8,  // 9: janusrpc.SegmentedTimelineQuery.bucketRanges:type_name -> janusrpc.BucketRange
	11, // 10: janusrpc.TimelineResponse.items:type_name -> janusrpc.TimelineItem
	12, // 11: janusrpc.TimelineQueryResponse.result:type_name -> janusrpc.TimelineResponse
	14, // 12: janusrpc.SegmentItem.segments:type_name -> janusrpc.SegmentItem
	14, // 13: janusrpc.SegmentedQueryResponse.segments:type_name -> janusrpc.SegmentItem
	0,  // 14: janusrpc.JanusService.GetState:input_type -> janusrpc.SingleStateRequest
	0,  // 15: janusrpc.JanusService.StreamState:input_type -> janusrpc.SingleStateRequest
	1,  // 16: janusrpc.JanusService.GetNodeStates:input_type -> janusrpc.MultipleStateRequest
	7,  // 17: janusrpc.JanusService.GetTelemetryTimeline:input_type -> janusrpc.TimelineQuery
	10, // 18: janusrpc.JanusService.GetSegmentedTimeline:input_type -> janusrpc.SegmentedTimelineQuery
	9,  // 19: janusrpc.JanusService.GetSegmentQuery:input_type -> janusrpc.SegmentQuery
	2,  // 20: janusrpc.JanusService.GetState:output_type -> janusrpc.StateResponse
	2,  // 21: janusrpc.JanusService.StreamState:output_type -> janusrpc.StateResponse
	3,  // 22: janusrpc.JanusService.GetNodeStates:output_type -> janusrpc.MultipleStateResponse
	13, // 23: janusrpc.JanusService.GetTelemetryTimeline:output_type -> janusrpc.TimelineQueryResponse
	13, // 24: janusrpc.JanusService.GetSegmentedTimeline:output_type -> janusrpc.TimelineQueryResponse
	15, // 25: janusrpc.JanusService.GetSegmentQuery:output_type -> janusrpc.SegmentedQueryResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_janus_proto_init() }
func file_janus_proto_init() {
	if File_janus_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_janus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentedTimelineQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_janus_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentedQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_janus_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_janus_proto_goTypes,
		DependencyIndexes: file_janus_proto_depIdxs,
		MessageInfos:      file_janus_proto_msgTypes,
	}.Build()
	File_janus_proto = out.File
	file_janus_proto_rawDesc = nil
	file_janus_proto_goTypes = nil
	file_janus_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JanusServiceClient is the client API for JanusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JanusServiceClient interface {
	GetState(ctx context.Context, in *SingleStateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	StreamState(ctx context.Context, in *SingleStateRequest, opts ...grpc.CallOption) (JanusService_StreamStateClient, error)
	GetNodeStates(ctx context.Context, in *MultipleStateRequest, opts ...grpc.CallOption) (*MultipleStateResponse, error)
	GetTelemetryTimeline(ctx context.Context, in *TimelineQuery, opts ...grpc.CallOption) (*TimelineQueryResponse, error)
	GetSegmentedTimeline(ctx context.Context, in *SegmentedTimelineQuery, opts ...grpc.CallOption) (*TimelineQueryResponse, error)
	GetSegmentQuery(ctx context.Context, in *SegmentQuery, opts ...grpc.CallOption) (*SegmentedQueryResponse, error)
}

type janusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJanusServiceClient(cc grpc.ClientConnInterface) JanusServiceClient {
	return &janusServiceClient{cc}
}

func (c *janusServiceClient) GetState(ctx context.Context, in *SingleStateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/janusrpc.JanusService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *janusServiceClient) StreamState(ctx context.Context, in *SingleStateRequest, opts ...grpc.CallOption) (JanusService_StreamStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JanusService_serviceDesc.Streams[0], "/janusrpc.JanusService/StreamState", opts...)
	if err != nil {
		return nil, err
	}
	x := &janusServiceStreamStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JanusService_StreamStateClient interface {
	Recv() (*StateResponse, error)
	grpc.ClientStream
}

type janusServiceStreamStateClient struct {
	grpc.ClientStream
}

func (x *janusServiceStreamStateClient) Recv() (*StateResponse, error) {
	m := new(StateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *janusServiceClient) GetNodeStates(ctx context.Context, in *MultipleStateRequest, opts ...grpc.CallOption) (*MultipleStateResponse, error) {
	out := new(MultipleStateResponse)
	err := c.cc.Invoke(ctx, "/janusrpc.JanusService/GetNodeStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *janusServiceClient) GetTelemetryTimeline(ctx context.Context, in *TimelineQuery, opts ...grpc.CallOption) (*TimelineQueryResponse, error) {
	out := new(TimelineQueryResponse)
	err := c.cc.Invoke(ctx, "/janusrpc.JanusService/GetTelemetryTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *janusServiceClient) GetSegmentedTimeline(ctx context.Context, in *SegmentedTimelineQuery, opts ...grpc.CallOption) (*TimelineQueryResponse, error) {
	out := new(TimelineQueryResponse)
	err := c.cc.Invoke(ctx, "/janusrpc.JanusService/GetSegmentedTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *janusServiceClient) GetSegmentQuery(ctx context.Context, in *SegmentQuery, opts ...grpc.CallOption) (*SegmentedQueryResponse, error) {
	out := new(SegmentedQueryResponse)
	err := c.cc.Invoke(ctx, "/janusrpc.JanusService/GetSegmentQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JanusServiceServer is the server API for JanusService service.
type JanusServiceServer interface {
	GetState(context.Context, *SingleStateRequest) (*StateResponse, error)
	StreamState(*SingleStateRequest, JanusService_StreamStateServer) error
	GetNodeStates(context.Context, *MultipleStateRequest) (*MultipleStateResponse, error)
	GetTelemetryTimeline(context.Context, *TimelineQuery) (*TimelineQueryResponse, error)
	GetSegmentedTimeline(context.Context, *SegmentedTimelineQuery) (*TimelineQueryResponse, error)
	GetSegmentQuery(context.Context, *SegmentQuery) (*SegmentedQueryResponse, error)
}

// UnimplementedJanusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJanusServiceServer struct {
}

func (*UnimplementedJanusServiceServer) GetState(context.Context, *SingleStateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedJanusServiceServer) StreamState(*SingleStateRequest, JanusService_StreamStateServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamState not implemented")
}
func (*UnimplementedJanusServiceServer) GetNodeStates(context.Context, *MultipleStateRequest) (*MultipleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeStates not implemented")
}
func (*UnimplementedJanusServiceServer) GetTelemetryTimeline(context.Context, *TimelineQuery) (*TimelineQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetryTimeline not implemented")
}
func (*UnimplementedJanusServiceServer) GetSegmentedTimeline(context.Context, *SegmentedTimelineQuery) (*TimelineQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentedTimeline not implemented")
}
func (*UnimplementedJanusServiceServer) GetSegmentQuery(context.Context, *SegmentQuery) (*SegmentedQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegmentQuery not implemented")
}

func RegisterJanusServiceServer(s *grpc.Server, srv JanusServiceServer) {
	s.RegisterService(&_JanusService_serviceDesc, srv)
}

func _JanusService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JanusServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janusrpc.JanusService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JanusServiceServer).GetState(ctx, req.(*SingleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JanusService_StreamState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SingleStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JanusServiceServer).StreamState(m, &janusServiceStreamStateServer{stream})
}

type JanusService_StreamStateServer interface {
	Send(*StateResponse) error
	grpc.ServerStream
}

type janusServiceStreamStateServer struct {
	grpc.ServerStream
}

func (x *janusServiceStreamStateServer) Send(m *StateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _JanusService_GetNodeStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JanusServiceServer).GetNodeStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janusrpc.JanusService/GetNodeStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JanusServiceServer).GetNodeStates(ctx, req.(*MultipleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JanusService_GetTelemetryTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimelineQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JanusServiceServer).GetTelemetryTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janusrpc.JanusService/GetTelemetryTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JanusServiceServer).GetTelemetryTimeline(ctx, req.(*TimelineQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _JanusService_GetSegmentedTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentedTimelineQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JanusServiceServer).GetSegmentedTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janusrpc.JanusService/GetSegmentedTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JanusServiceServer).GetSegmentedTimeline(ctx, req.(*SegmentedTimelineQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _JanusService_GetSegmentQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SegmentQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JanusServiceServer).GetSegmentQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/janusrpc.JanusService/GetSegmentQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JanusServiceServer).GetSegmentQuery(ctx, req.(*SegmentQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _JanusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "janusrpc.JanusService",
	HandlerType: (*JanusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _JanusService_GetState_Handler,
		},
		{
			MethodName: "GetNodeStates",
			Handler:    _JanusService_GetNodeStates_Handler,
		},
		{
			MethodName: "GetTelemetryTimeline",
			Handler:    _JanusService_GetTelemetryTimeline_Handler,
		},
		{
			MethodName: "GetSegmentedTimeline",
			Handler:    _JanusService_GetSegmentedTimeline_Handler,
		},
		{
			MethodName: "GetSegmentQuery",
			Handler:    _JanusService_GetSegmentQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamState",
			Handler:       _JanusService_StreamState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "janus.proto",
}
